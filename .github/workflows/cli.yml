name: Run Tests

on:
  push:
    branches:
      - master
      - v1
  pull_request:
    branches:
      - master
      - v1

jobs:

  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: [1.11, 1.12, 1.13]
    name: ${{ matrix.os }} @ Go ${{ matrix.go }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set up Go ${{ matrix.go }}
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go }}

      - name: Set GOPATH, PATH and ENV
        run: |
          echo "::set-env name=GOPATH::$(dirname $GITHUB_WORKSPACE)"
          echo "::set-env name=GO111MODULE::on"
          echo "::set-env name=GOPROXY::https://proxy.golang.org"
          echo "::add-path::$(dirname $GITHUB_WORKSPACE)/bin"
          cd $(mktemp -d); go mod init tmp; go get -u github.com/mitchellh/gox; cd -
          cd $(mktemp -d); go mod init tmp; go get -u golang.org/x/lint/golint; cd -
        shell: bash

      - name: Checkout Code
        uses: actions/checkout@v1
        with:
          ref: ${{ github.ref }}

      - name: GOFMT Check
        if: matrix.go == 1.13 && matrix.os == 'ubuntu-latest'
        run: test -z $(gofmt -l .)

      - name: Build
        run: |
          if [ "$GO111MODULE" != "on" ]; then go get -t -v ./... ; else true; fi
          golint -set_exit_status .
          go vet $MOD_VENDOR $(go list $MOD_VENDOR ./... | grep -v /vendor/)
          go test -v -race $MOD_VENDOR ./...
          Only build binaries from the latest Go release.
          if [ "${LATEST}" = "true" ]; then gox -os="linux darwin windows" -arch="amd64" -output="imagectl.{{.OS}}.{{.Arch}}" -ldflags "-X main.Rev=`git rev-parse --short HEAD`" -verbose ./...; fi

